pipeline {
    agent any 
    stages {
        stage('Checkout from Git') { 
            steps {
                echo "------before git checkout-----"
                git branch: 'development' , url: 'https://github.com/AshwiniPatil90/Project2-TerraformJenkins.git'
            }
        }
        stage('Terraform version') { 
            steps {
                script {
                    sh 'terraform --version'
                }
            }
        }
        stage('Terraform init') { 
            steps {
                script {
                    sh 'terraform init'
                }
            }
        }
        stage('Terraform validate') { 
            steps {
                script {
                    sh 'terraform validate'
                }
            }
        }
        stage('Terraform Plan') { 
            steps {
                withCredentials([file(credentialsId: 'dev-tfvars', variable: 'TFVARS_FILE')])
                script {
                    sh "terraform plan -var-file=$TFVARS_FILE"
                }
            }
        }
        stage('Approve to Apply') { 
            steps {
               // Prompt for confirmation before applying changes
                input message: "Do you want to apply the changes?", ok: "Proceed"
            }
        }
        stage('Terraform Apply') { 
            steps {
                // Apply the Terraform configuration using the .tfvars file
                withCredentials([file(credentialsId: 'dev-tfvars', variable: 'TFVARS_FILE')])
                script {
                    sh "terraform apply -var-file=$TFVARS_FILE -auto-approve"
                }
            }
        }
        stage('Approve to Destroy') { 
            steps {
               input message: 'Approve to Destroy', ok: 'Destroy'
            }
        }
        stage('Terraform Destroy') { 
            steps {
                // Destroy the Terraform configuration using the .tfvars file
                withCredentials([file(credentialsId: 'dev-tfvars', variable: 'TFVARS_FILE')])
                script {
                    sh 'terraform destroy -var-file=$TFVARS_FILE --auto-approve'
                }
            }
        }
    }
     post {
        always {
            // Clean up workspace to ensure the .tfvars file is not left behind
            cleanWs()
        }
    }
}